const express = require("express");
const bodyParser = require("body-parser");
const request = require("request");
const config = require("./config.json");

const app = express().use(bodyParser.json());

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;

// webhook verification
app.get("/webhook", (req, res) => {
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];

  if (mode && token) {
    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      console.log(`${config.botName} WEBHOOK_VERIFIED`);
      res.status(200).send(challenge);
    } else {
      res.sendStatus(403);
    }
  }
});

// messages handler
app.post("/webhook", (req, res) => {
  let body = req.body;

  if (body.object === "page") {
    body.entry.forEach(function(entry) {
      let webhook_event = entry.messaging[0];
      let sender_psid = webhook_event.sender.id;

      if (webhook_event.message) {
        handleMessage(sender_psid, webhook_event.message);
      }
    });

    res.status(200).send("EVENT_RECEIVED");
  } else {
    res.sendStatus(404);
  }
});

function handleMessage(sender_psid, received_message) {
  let response;

  if (config.autoReply) {
    if (config.replyMessage) {
      response = { text: `${config.replyMessage}\n\nðŸ‘‰ à¦†à¦ªà¦¨à¦¿ à¦²à¦¿à¦–à§‡à¦›à§‡à¦¨: "${received_message.text}"` };
    } else {
      response = { text: `à¦†à¦®à¦¿ ${config.botName} â€” à¦†à¦ªà¦¨à¦¿ à¦²à¦¿à¦–à§‡à¦›à§‡à¦¨: "${received_message.text}"` };
    }
  }

  callSendAPI(sender_psid, response);
}

function callSendAPI(sender_psid, response) {
  let request_body = {
    recipient: { id: sender_psid },
    message: response
  };

  request(
    {
      uri: "https://graph.facebook.com/v12.0/me/messages",
      qs: { access_token: PAGE_ACCESS_TOKEN },
      method: "POST",
      json: request_body
    },
    (err, res, body) => {
      if (!err) {
        console.log("Message sent!");
      } else {
        console.error("Unable to send message:" + err);
      }
    }
  );
}

app.listen(process.env.PORT || 3000, () =>
  console.log(`${config.botName} is listening...`)
);
